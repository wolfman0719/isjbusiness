<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2019.4 (Build 383U)" ts="2020-02-05 17:51:31">
<Class name="ISJ.BP.CollectBilling">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>65406,46850.74437</TimeChanged>
<TimeCreated>65329,45375.282412</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='Ens.Request' response='Ens.Response' height='2000' width='7500' >
<context>
<property name='ConfigName' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
<property name='DBMessage' type='ISJ.Message.DBRequest' instantiate='0' />
</context>
<sequence xend='200' yend='800' >
<assign name="Intialize" property="context.ConfigName" value="process.%PrimaryRequestHeader.SourceConfigName" action="set" xpos='200' ypos='250' >
<annotation><![CDATA[ビジネスサービス種類の判別のため、構成名を取得する]]]]><![CDATA[></annotation>
</assign>
<switch name='WhichYear' xpos='200' ypos='350' xend='200' yend='600' >
<case condition='context.ConfigName[2003' name='Year2003' >
<transform name='Year2003' class='ISJ.Transform.Year2003' source='request' target='context.DBMessage' xpos='335' ypos='500' />
</case>
<case condition='context.ConfigName[2004' name='Year2004' >
<transform name='Year2004' class='ISJ.Transform.Year2004' source='request' target='context.DBMessage' xpos='605' ypos='500' />
</case>
<case condition='context.ConfigName[2005' name='Year2005' >
<transform name='Year2005' class='ISJ.Transform.Year2005' source='request' target='context.DBMessage' xpos='875' ypos='500' />
</case>
<case condition='context.ConfigName[2006' name='Year2006' >
<transform name='Year2006' class='ISJ.Transform.Year2006' source='request' target='context.DBMessage' xpos='1145' ypos='500' />
</case>
<case condition='context.ConfigName[2007' name='Year2007' >
<transform name='Year2007' class='ISJ.Transform.Year2008' source='request' target='context.DBMessage' xpos='1415' ypos='500' />
</case>
<case condition='context.ConfigName[2008' name='Year2008' >
<transform name='Year2008' class='ISJ.Transform.Year2008' source='request' target='context.DBMessage' xpos='1685' ypos='500' />
</case>
<case condition='context.ConfigName[2009' name='Year2009' >
<transform name='Year2009' class='ISJ.Transform.Year2009' source='request' target='context.DBMessage' xpos='1955' ypos='500' />
</case>
<case condition='context.ConfigName[2010' name='Year2010' >
<transform name='Year2010' class='ISJ.Transform.Year2008' source='request' target='context.DBMessage' xpos='2225' ypos='500' />
</case>
<case condition='context.ConfigName[2011' name='Year2011' >
<transform name='Year2011' class='ISJ.Transform.Year2008' source='request' target='context.DBMessage' xpos='2495' ypos='500' />
</case>
<case condition='context.ConfigName[2012' name='Year2012' >
<transform name='Year2012' class='ISJ.Transform.Year2012' source='request' target='context.DBMessage' xpos='2765' ypos='500' />
</case>
<case condition='context.ConfigName[2013' name='Year2013' >
<transform name='Year2013' class='ISJ.Transform.Year2013' source='request' target='context.DBMessage' xpos='3035' ypos='500' />
</case>
<case condition='context.ConfigName[2014' name='Year2014' >
<transform name='Year2014' class='ISJ.Transform.Year2012' source='request' target='context.DBMessage' xpos='3305' ypos='500' />
</case>
<case condition='context.ConfigName[2015' name='Year2015' >
<transform name='Year2015' class='ISJ.Transform.Year2015' source='request' target='context.DBMessage' xpos='3575' ypos='500' />
</case>
<case condition='context.ConfigName[2016' name='Year2016' >
<transform name='Year2016' class='ISJ.Transform.Year2016' source='request' target='context.DBMessage' xpos='3845' ypos='500' />
</case>
<case condition='context.ConfigName[2017' name='Year2017' >
<transform name='Year2017' class='ISJ.Transform.Year2017' source='request' target='context.DBMessage' xpos='4115' ypos='500' />
</case>
<case condition='context.ConfigName[2018' name='Year2018' >
<transform name='Year2018' class='ISJ.Transform.Year2018' source='request' target='context.DBMessage' xpos='4385' ypos='500' />
</case>
<case condition='context.ConfigName[2019' name='Year2019' >
<transform name='Year2019' class='ISJ.Transform.Year2015' source='request' target='context.DBMessage' xpos='4655' ypos='500' />
</case>
<default name='default' />
</switch>
<call name='InsertRecord' target='InsertRecord' async='1' xpos='200' ypos='700' >
<request type='ISJ.Message.DBRequest' >
<assign property="callrequest.AccountName" value="context.DBMessage.AccountName" action="set" />
<assign property="callrequest.ShortName" value="context.DBMessage.ShortName" action="set" />
<assign property="callrequest.AM" value="context.DBMessage.AM" action="set" />
<assign property="callrequest.Year" value="context.DBMessage.Year" action="set" />
<assign property="callrequest.Amount" value="context.DBMessage.Amount" action="set" />
<assign property="callrequest.AccountType" value="context.DBMessage.AccountType" action="set" />
</request>
<response type='Ens.StringResponse' />
</call>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="ISJ.BillingResult">
<Super>Ens.Production</Super>
<TimeChanged>65406,46305.004411</TimeChanged>
<TimeCreated>65329,45214.56142</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="ISJ.BillingResult" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="CollectBillingByYears" Category="" ClassName="ISJ.BP.CollectBilling" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Load2003" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2003</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FileSpec">2003*</Setting>
  </Item>
  <Item Name="Load2004" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2004</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FileSpec">2004*</Setting>
  </Item>
  <Item Name="Load2005" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2005</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2005*</Setting>
  </Item>
  <Item Name="Load2006" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2006</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2006*</Setting>
  </Item>
  <Item Name="Load2007" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2008</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2007*</Setting>
  </Item>
  <Item Name="Load2009" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2009</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2009*</Setting>
  </Item>
  <Item Name="Load2012" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2012</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2012*</Setting>
  </Item>
  <Item Name="Load2013" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2013</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2013*</Setting>
  </Item>
  <Item Name="Load2015" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2015</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2015*</Setting>
  </Item>
  <Item Name="Load2016" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2016</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2016*</Setting>
  </Item>
  <Item Name="Load2017" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2017</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2017*</Setting>
  </Item>
  <Item Name="Load2018" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2018</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2018*</Setting>
  </Item>
  <Item Name="Load2008" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2008</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2008*</Setting>
  </Item>
  <Item Name="Load2010" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2008</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2010*</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
  </Item>
  <Item Name="Load2011" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2008</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2011*</Setting>
  </Item>
  <Item Name="Load2014" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2012</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="Charset">utf-8</Setting>
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Adapter" Name="FileSpec">2014*</Setting>
  </Item>
  <Item Name="InsertRecord" Category="" ClassName="ISJ.Operation.InsertRecord" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Update some columns for ISJ.Results" Category="" ClassName="ISJ.Operation.DataCleansing" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Data Cleansing" Category="" ClassName="ISJ.Service.DataCleansing" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="Load2019" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="FilePath">/intersystems/iris/isjbusiness/in</Setting>
    <Setting Target="Adapter" Name="FileSpec">2019*</Setting>
    <Setting Target="Adapter" Name="ArchivePath">/intersystems/iris/isjbusiness/arc</Setting>
    <Setting Target="Adapter" Name="WorkPath">/intersystems/iris/isjbusiness/work</Setting>
    <Setting Target="Host" Name="RecordMap">ISJ.ByAP2015</Setting>
    <Setting Target="Host" Name="TargetConfigNames">CollectBillingByYears</Setting>
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2003">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2003'
on 2019-11-14 at 18:06:02.781 [2019-11-14 09:06:02.781 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65162.781707</TimeChanged>
<TimeCreated>65324,61677.332696</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2003.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Purachase = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Support = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Amount = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Purachase, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Support, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Amount, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2003.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2003" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2003.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="Purachase" datatype="%String">
  </Field>
  <Field name="Support" datatype="%String">
  </Field>
  <Field name="Amount" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2003.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2003'
on 2019-11-14 at 18:06:02.774 [2019-11-14 09:06:02.774 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65162.777196</TimeChanged>
<TimeCreated>65331,65162.77485</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Purachase">
<Type>%String</Type>
</Property>

<Property name="Support">
<Type>%String</Type>
</Property>

<Property name="Amount">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2003.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2003.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2003.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2003.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Organization</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Support</Value>
</Value>
<Value name="5">
<Value>Amount</Value>
</Value>
<Value name="6">
<Value>Purachase</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2004">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2004'
on 2019-11-14 at 18:05:26.789 [2019-11-14 09:05:26.789 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65126.789781</TimeChanged>
<TimeCreated>65324,61300.03139</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2004.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Purchase = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Support = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Rental = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Consulting = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Other = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Amount = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Purchase, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Support, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Rental, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Consulting, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Other, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Amount, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2004.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2004" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2004.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="Purchase" datatype="%String">
  </Field>
  <Field name="Support" datatype="%String">
  </Field>
  <Field name="Rental" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Consulting" datatype="%String">
  </Field>
  <Field name="Other" datatype="%String">
  </Field>
  <Field name="Amount" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2004.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2004'
on 2019-11-14 at 18:05:26.778 [2019-11-14 09:05:26.778 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65126.783135</TimeChanged>
<TimeCreated>65331,65126.778943</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Purchase">
<Type>%String</Type>
</Property>

<Property name="Support">
<Type>%String</Type>
</Property>

<Property name="Rental">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Consulting">
<Type>%String</Type>
</Property>

<Property name="Other">
<Type>%String</Type>
</Property>

<Property name="Amount">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2004.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2004.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2004.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2004.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Organization</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Support</Value>
</Value>
<Value name="5">
<Value>Rental</Value>
</Value>
<Value name="6">
<Value>Training</Value>
</Value>
<Value name="7">
<Value>Consulting</Value>
</Value>
<Value name="8">
<Value>Other</Value>
</Value>
<Value name="9">
<Value>Amount</Value>
</Value>
<Value name="10">
<Value>Purchase</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2005">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2005'
on 2019-11-14 at 18:06:32.006 [2019-11-14 09:06:32.006 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65192.007246</TimeChanged>
<TimeCreated>65324,61879.933527</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2005.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.NO = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Rental = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Consulting = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Other = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.NO, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Rental, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Consulting, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Other, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2005.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2005" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2005.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="NO" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="Rental" datatype="%String">
  </Field>
  <Field name="Consulting" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Other" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2005.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2005'
on 2019-11-14 at 18:06:31.997 [2019-11-14 09:06:31.997 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65192.002249</TimeChanged>
<TimeCreated>65331,65191.997601</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="NO">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="Rental">
<Type>%String</Type>
</Property>

<Property name="Consulting">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Other">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2005.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2005.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2005.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2005.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NO</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>LicenseCore</Value>
</Value>
<Value name="5">
<Value>ServiceCore</Value>
</Value>
<Value name="6">
<Value>Rental</Value>
</Value>
<Value name="7">
<Value>Consulting</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Other</Value>
</Value>
<Value name="10">
<Value>Total</Value>
</Value>
<Value name="11">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2006">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2006'
on 2019-11-14 at 18:07:08.068 [2019-11-14 09:07:08.068 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65228.068889</TimeChanged>
<TimeCreated>65324,61955.436637</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2006.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.NO = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Rental = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.NO, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Rental, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2006.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2006" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2006.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="NO" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="Rental" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2006.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2006'
on 2019-11-14 at 18:07:08.060 [2019-11-14 09:07:08.060 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65228.064004</TimeChanged>
<TimeCreated>65331,65228.060377</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="NO">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="Rental">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2006.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2006.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2006.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2006.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NO</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>LicenseCore</Value>
</Value>
<Value name="5">
<Value>ServiceCore</Value>
</Value>
<Value name="6">
<Value>Rental</Value>
</Value>
<Value name="7">
<Value>Training</Value>
</Value>
<Value name="8">
<Value>Total</Value>
</Value>
<Value name="9">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2008">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2008'
on 2019-11-14 at 18:07:32.885 [2019-11-14 09:07:32.885 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65252.885885</TimeChanged>
<TimeCreated>65324,62136.059454</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2008.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.NO = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Rental = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.NO, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Rental, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2008.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2008" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2008.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="NO" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="Rental" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2008.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2008'
on 2019-11-14 at 18:07:32.875 [2019-11-14 09:07:32.875 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65252.880331</TimeChanged>
<TimeCreated>65331,65252.875825</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="NO">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="Rental">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2008.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2008.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2008.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2008.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NO</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>LicenseCore</Value>
</Value>
<Value name="5">
<Value>ServiceCore</Value>
</Value>
<Value name="6">
<Value>Rental</Value>
</Value>
<Value name="7">
<Value>SubscCore</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Total</Value>
</Value>
<Value name="10">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2009">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2009'
on 2019-11-14 at 18:08:02.332 [2019-11-14 09:08:02.332 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65282.333454</TimeChanged>
<TimeCreated>65324,62216.366226</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2009.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.NO = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Rental = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Other = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.NO, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Rental, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Other, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2009.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2009" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2009.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="NO" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="Rental" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Other" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2009.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2009'
on 2019-11-14 at 18:08:02.324 [2019-11-14 09:08:02.324 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65282.328672</TimeChanged>
<TimeCreated>65331,65282.324087</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="NO">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="Rental">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Other">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2009.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2009.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2009.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2009.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>NO</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>LicenseCore</Value>
</Value>
<Value name="5">
<Value>ServiceCore</Value>
</Value>
<Value name="6">
<Value>Rental</Value>
</Value>
<Value name="7">
<Value>SubscCore</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Other</Value>
</Value>
<Value name="10">
<Value>Total</Value>
</Value>
<Value name="11">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2012">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2012'
on 2019-11-14 at 18:08:34.682 [2019-11-14 09:08:34.682 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65314.683095</TimeChanged>
<TimeCreated>65324,63561.773604</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2012.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.No = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.No, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2012.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2012" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2012.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="No" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2012.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2012'
on 2019-11-14 at 18:08:34.674 [2019-11-14 09:08:34.674 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65314.678423</TimeChanged>
<TimeCreated>65331,65314.674341</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="No">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2012.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2012.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2012.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2012.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>No</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>LicenseCore</Value>
</Value>
<Value name="5">
<Value>ServiceCore</Value>
</Value>
<Value name="6">
<Value>SubscCore</Value>
</Value>
<Value name="7">
<Value>Training</Value>
</Value>
<Value name="8">
<Value>Total</Value>
</Value>
<Value name="9">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2013">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2013'
on 2019-11-07 at 17:41:54.021 [2019-11-07 08:41:54.021 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65344.703463</TimeChanged>
<TimeCreated>65324,63701.214037</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2013.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.No = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Noop = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.No, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Noop, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2013.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2013" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2013.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="No" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="Noop" datatype="%String">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2013.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2013'
on 2019-11-07 at 17:41:54.011 [2019-11-07 08:41:54.011 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65324,63714.037827</TimeChanged>
<TimeCreated>65324,63714.01133</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="No">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
</Property>

<Property name="Noop">
<Type>%String</Type>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2013.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2013.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2013.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2013.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>No</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Noop</Value>
</Value>
<Value name="5">
<Value>LicenseCore</Value>
</Value>
<Value name="6">
<Value>ServiceCore</Value>
</Value>
<Value name="7">
<Value>SubscCore</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Total</Value>
</Value>
<Value name="10">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2015">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2015'
on 2019-11-14 at 18:23:56.937 [2019-11-14 09:23:56.937 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,66236.938209</TimeChanged>
<TimeCreated>65329,52677.536133</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2015.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.No = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Noop = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.No, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Noop, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2015.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2015" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2015.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="No" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="Noop" datatype="%String">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2015.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2015'
on 2019-11-14 at 18:23:56.928 [2019-11-14 09:23:56.928 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,66236.947323</TimeChanged>
<TimeCreated>65331,66236.928227</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="No">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Noop">
<Type>%String</Type>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2015.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2015.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2015.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2015.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>No</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Noop</Value>
</Value>
<Value name="5">
<Value>LicenseCore</Value>
</Value>
<Value name="6">
<Value>ServiceCore</Value>
</Value>
<Value name="7">
<Value>SubscCore</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Total</Value>
</Value>
<Value name="10">
<Value>Organization</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2016">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2016'
on 2019-11-14 at 18:09:42.065 [2019-11-14 09:09:42.065 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65382.06636</TimeChanged>
<TimeCreated>65324,63793.215637</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2016.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.No = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SalesRep = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.No, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SalesRep, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2016.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2016" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2016.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="No" datatype="%String">
  </Field>
  <Field name="SalesRep" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2016.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2016'
on 2019-11-14 at 18:09:42.057 [2019-11-14 09:09:42.057 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65382.061561</TimeChanged>
<TimeCreated>65331,65382.05741</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="No">
<Type>%String</Type>
</Property>

<Property name="SalesRep">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2016.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2016.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2016.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2016.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>No</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Organization</Value>
</Value>
<Value name="5">
<Value>LicenseCore</Value>
</Value>
<Value name="6">
<Value>ServiceCore</Value>
</Value>
<Value name="7">
<Value>SubscCore</Value>
</Value>
<Value name="8">
<Value>Training</Value>
</Value>
<Value name="9">
<Value>Total</Value>
</Value>
<Value name="10">
<Value>SalesRep</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2017">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2017'
on 2019-11-14 at 18:10:15.327 [2019-11-14 09:10:15.327 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65415.328079</TimeChanged>
<TimeCreated>65324,63857.219031</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2017.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2017.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2017" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2017.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2017.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2017'
on 2019-11-14 at 18:10:15.320 [2019-11-14 09:10:15.320 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65415.323786</TimeChanged>
<TimeCreated>65331,65415.320749</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2017.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2017.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2017.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2017.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Organization</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>ServiceCore</Value>
</Value>
<Value name="5">
<Value>SubscCore</Value>
</Value>
<Value name="6">
<Value>Training</Value>
</Value>
<Value name="7">
<Value>Total</Value>
</Value>
<Value name="8">
<Value>LicenseCore</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.ByAP2018">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'ISJ.ByAP2018'
on 2019-11-14 at 18:10:43.997 [2019-11-14 09:10:43.997 UTC]
by user _SYSTEM</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65331,65443.99768</TimeChanged>
<TimeCreated>65324,63916.787679</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>ISJ.ByAP2018.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, $char(34))
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Branch = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SalesRep = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Organization = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Noop = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicenseCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.ServiceCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.SubscCore = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Training = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Total = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: ..Escape(pObject.Branch, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SalesRep, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Organization, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Noop, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.LicenseCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.ServiceCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.SubscCore, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Training, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: ..Escape(pObject.Total, $lb($char(44)),"quote",$char(34)),1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("ISJ.ByAP2018.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec/>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="ISJ.ByAP2018" type="delimited" char_encoding="UTF-8" targetClassname="ISJ.ByAP2018.Record" recordTerminator="\x0d\x0a" escaping="quote" escapeSequence="&quot;">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="Branch" datatype="%String">
  </Field>
  <Field name="SalesRep" datatype="%String">
  </Field>
  <Field name="Organization" required="0" ignored="0" datatype="%String" params="MAXLEN=100" repeating="0">
  </Field>
  <Field name="Noop" datatype="%String">
  </Field>
  <Field name="LicenseCore" datatype="%String">
  </Field>
  <Field name="ServiceCore" datatype="%String">
  </Field>
  <Field name="SubscCore" datatype="%String">
  </Field>
  <Field name="Training" datatype="%String">
  </Field>
  <Field name="Total" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="ISJ.ByAP2018.Record">
<Description>
RECORDMAP: Generated from RecordMap 'ISJ.ByAP2018'
on 2019-11-14 at 18:10:43.988 [2019-11-14 09:10:43.988 UTC]
by user _SYSTEM</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65331,65443.992998</TimeChanged>
<TimeCreated>65331,65443.988312</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="Branch">
<Type>%String</Type>
</Property>

<Property name="SalesRep">
<Type>%String</Type>
</Property>

<Property name="Organization">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Noop">
<Type>%String</Type>
</Property>

<Property name="LicenseCore">
<Type>%String</Type>
</Property>

<Property name="ServiceCore">
<Type>%String</Type>
</Property>

<Property name="SubscCore">
<Type>%String</Type>
</Property>

<Property name="Training">
<Type>%String</Type>
</Property>

<Property name="Total">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ByAP2018.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^ISJ.ByAP2018.RecordD</IdLocation>
<IndexLocation>^ISJ.ByAP2018.RecordI</IndexLocation>
<StreamLocation>^ISJ.ByAP2018.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Branch</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Organization</Value>
</Value>
<Value name="5">
<Value>Noop</Value>
</Value>
<Value name="6">
<Value>LicenseCore</Value>
</Value>
<Value name="7">
<Value>ServiceCore</Value>
</Value>
<Value name="8">
<Value>SubscCore</Value>
</Value>
<Value name="9">
<Value>Training</Value>
</Value>
<Value name="10">
<Value>Total</Value>
</Value>
<Value name="11">
<Value>SalesRep</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Master.AM">
<Super>%Persistent</Super>
<TimeChanged>65356,44420.856393</TimeChanged>
<TimeCreated>65337,62727.474633</TimeCreated>

<Property name="AccountName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Year">
<Type>%Integer</Type>
</Property>

<Property name="AM">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Index name="AMKey">
<PrimaryKey>1</PrimaryKey>
<Properties>AccountName,Year</Properties>
<Unique>1</Unique>
</Index>

<Index name="YearKey">
<Properties>Year</Properties>
</Index>

<Index name="AccountKey">
<Properties>AccountName</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.Master.AMD</DataLocation>
<DefaultData>AMDefaultData</DefaultData>
<IdLocation>^ISJ.Master.AMD</IdLocation>
<IndexLocation>^ISJ.Master.AMI</IndexLocation>
<StreamLocation>^ISJ.Master.AMS</StreamLocation>
<ExtentSize>1297</ExtentSize>
<Data name="AMDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AccountName</Value>
</Value>
<Value name="3">
<Value>Year</Value>
</Value>
<Value name="4">
<Value>AM</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
<AverageFieldSize>1</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3.18</AverageFieldSize>
</Property>
<Property name="AM">
<Selectivity>14.2857%</Selectivity>
<AverageFieldSize>6.56</AverageFieldSize>
</Property>
<Property name="AccountName">
<Selectivity>0.5656%</Selectivity>
<AverageFieldSize>24.37</AverageFieldSize>
</Property>
<Property name="Year">
<Selectivity>7.1405%</Selectivity>
<AverageFieldSize>4</AverageFieldSize>
</Property>
<SQLMap name="AMKey">
<BlockCount>-16</BlockCount>
</SQLMap>
<SQLMap name="AccountKey">
<BlockCount>-12</BlockCount>
</SQLMap>
<SQLMap name="IDKEY">
<BlockCount>-36</BlockCount>
</SQLMap>
<SQLMap name="YearKey">
<BlockCount>-12</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="ISJ.Message.APListRequest">
<Super>Ens.Request</Super>
<TimeChanged>65349,68090.061867</TimeChanged>
<TimeCreated>65349,68089.875645</TimeCreated>

<Property name="FileDir">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>APListRequestDefaultData</DefaultData>
<Data name="APListRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"APListRequest"</Subscript>
<Value name="1">
<Value>FileDir</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Message.DBRequest">
<Super>Ens.Request</Super>
<TimeChanged>65332,52481.226437</TimeChanged>
<TimeCreated>65329,64259.161648</TimeCreated>

<Property name="AccountName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ShortName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AM">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Year">
<Type>%Integer</Type>
</Property>

<Property name="Amount">
<Type>%Integer</Type>
</Property>

<Property name="AccountType">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DefaultData>DBRequestDefaultData</DefaultData>
<Data name="DBRequestDefaultData">
<Subscript>"DBRequest"</Subscript>
<Value name="1">
<Value>AccountName</Value>
</Value>
<Value name="2">
<Value>ShortName</Value>
</Value>
<Value name="3">
<Value>AM</Value>
</Value>
<Value name="4">
<Value>Year</Value>
</Value>
<Value name="5">
<Value>Amount</Value>
</Value>
<Value name="6">
<Value>AccountType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Operation.DataCleansing">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65386,65042.455815</TimeChanged>
<TimeCreated>65349,68376.512256</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="UpdateSomeColumns">
<FormalSpec>pRequest:ISJ.Message.APListRequest,*pResponse:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//　データの収集後、いくつかの情報を付加する
	//  1. アカウントマネージャーのマスター情報をAPListのエクセルファイルをタブ区切りに変換したファイルから取得する
	//  2. 会社名変更や合併、買収等で名前の変わったアカウントを共通とみなすためのSHORTNAMEルックアップテーブルをリストファイルから読み取り作成
	//  3. 2.のルックアップテーブルを参照してSHORTNAMEを割り当てる（ISJ.Results全件）
	//  4. アカウントのタイプを割り当てる（取引の開始年度でタイプの値を決める）
	//  5. アカウントマネージャーが割り当てられていないレコードに対して、アカウントマネージャーを割り当てる
	//     アカウントマネージャーのマスターテーブルを検索
	//     マスターテーブル上の値と表記のゆれの可能性があるのでpythonプログラムでその文字列の類似度を計算する
	//     類似度が閾値（0.90）を超えている候補がある場合は、同一とみなし、その該当アカウントマネージャーを取得する
	set status = $$$OK
	
	set pResponse = ##class(Ens.StringResponse).%New()
	
    set filedir = pRequest.FileDir
    set os = $system.Version.GetOS()
    if os = "Windows" {
	    set dirsep = "\"
    }
    else {
	    set dirsep = "/"
    }
    
    set status = ##class(ISJ.Tools.Utility).BuildAMMaster(filedir)
 
	if status = '$$$OK {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加できませんでした。(BuildAMMaster) エラー: "_$system.Status.GetErrorText(status)
	   quit status
	}

    set filename = filedir_dirsep_"shortnamelist.csv"

    set status = ##class(ISJ.Tools.Utility).BuildShortNameLookupTable(filename)

	if status = '$$$OK {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加できませんでした。(BuildShortNameLookupTable) エラー: "_$system.Status.GetErrorText(status)
	   quit status
	}

    set status = ##class(ISJ.Tools.Utility).AssignShortName()

	if status = '$$$OK {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加できませんでした。 (AssignShortName) エラー: "_$system.Status.GetErrorText(status)
	   quit status
	}

    set status = ##class(ISJ.Tools.Utility).AssignAccountType()

	if status = '$$$OK {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加できませんでした。 (AssignAccountType) エラー: "_$system.Status.GetErrorText(status)
	   quit status
	}

    set status = ##class(ISJ.Tools.Utility).AssignAccountManager()

    if status = $$$OK {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加されました。"
	}
	else {
	   set pResponse.StringValue = pRequest.FileDir_" のデータが追加できませんでした。 (AssignAccountManager) エラー: "_$system.Status.GetErrorText(status)
	}

	Quit status
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="ISJ.Message.APListRequest"> 
		<Method>UpdateSomeColumns</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Operation.InsertRecord">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65384,68321.307099</TimeChanged>
<TimeCreated>65331,62481.557878</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="InsertRecord">
<FormalSpec>pRequest:ISJ.Message.DBRequest,*pResponse:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set status = $$$OK
	
	$$$TRACE("アカウント名 = "_pRequest.AccountName)
	$$$TRACE("年 = "_pRequest.Year)
	$$$TRACE("略称 = "_pRequest.ShortName)
	$$$TRACE("営業担当 = "_pRequest.AM)
	$$$TRACE("アカウントタイプ = "_pRequest.AccountType)
	
	set record = ##class(ISJ.Results).%New()
	set record.AccountName = pRequest.AccountName
	set record.AccountType = pRequest.AccountType
	set record.AM = pRequest.AM
	set record.Amount = pRequest.Amount
	set record.ShortName = pRequest.ShortName
	set record.Year = pRequest.Year
	
	set status = record.%Save()
	
	set pResponse = ##class(Ens.StringResponse).%New()
	  
	if status = $$$OK {
	   set pResponse.StringValue = pRequest.Year_" のデータが追加されました。"
	}
	else {
	   set pResponse.StringValue = pRequest.Year_" のデータが追加できませんでした。エラー: "_$system.Status.GetErrorText(status)
	}
	 
	Quit status
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="ISJ.Message.DBRequest"> 
		<Method>InsertRecord</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Performance">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.CubeDefinition</Super>
<TimeChanged>65387,67704.811555</TimeChanged>
<TimeCreated>65387,67114.12231</TimeCreated>
<DependsOn>ISJ.Results</DependsOn>

<XData name="Cube">
<Description>
Cube definition from Architect.</Description>
<XMLNamespace>http://www.intersystems.com/deepsee</XMLNamespace>
<Data><![CDATA[
<cube xmlns="http://www.intersystems.com/deepsee" name="Billing" displayName="Billing" disabled="false" abstract="false" sourceClass="ISJ.Results" countMeasureName="%COUNT" bucketSize="8" bitmapChunkInMemory="false" precompute="0" disableListingGroups="false" enableSqlRestrict="false">
  <dimension name="ShortName" disabled="false" hasAll="false" allCaption="All ShortName" allDisplayName="ShortName" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="ShortName" disabled="false" sourceProperty="ShortName" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="AM" disabled="false" hasAll="false" allCaption="All AM" allDisplayName="AM" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="AM" disabled="false" sourceProperty="AM" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="Year" disabled="false" hasAll="false" allCaption="All Year" allDisplayName="Year" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="Year" disabled="false" sourceProperty="Year" list="false" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <dimension name="AccountType" disabled="false" hasAll="false" allCaption="All AccountType" allDisplayName="AccountType" type="data" hidden="false" showHierarchies="default">
    <hierarchy name="H1" disabled="false" hidden="false">
      <level name="AccountType" disabled="false" sourceProperty="AccountType" list="false" rangeExpression="1:Legacy;2:ISJ V1.0;3:ISJ V2.0;" useDisplayValue="true" useAsFilter="true" hidden="false">
      </level>
    </hierarchy>
  </dimension>
  <measure name="Amount" disabled="false" sourceProperty="Amount" aggregate="SUM" type="number" hidden="false" searchable="false">
  </measure>
  <listing name="New_listing1" displayName="Detailed List" disabled="false" listingType="table" fieldList="AccountName,Year,Amount">
  </listing>
</cube>
]]></Data>
</XData>

<Parameter name="DOMAIN"/>
</Class>


<Class name="ISJ.Performance.Fact">
<Description><![CDATA[
Fact table for cube 'Billing'.<br/>
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.]]></Description>
<Final>1</Final>
<IncludeCode>%DeepSee</IncludeCode>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.FactTable,%DeepSee.CubeFunctionSet</Super>
<TimeChanged>65413,42016.618813</TimeChanged>
<TimeCreated>65413,42016.504118</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>
<Inheritance>right</Inheritance>

<Index name="DxShortName">
<Description>
Index for fact 2.</Description>
<Type>bitmap</Type>
<Properties>DxShortName</Properties>
</Index>

<Index name="DxAM">
<Description>
Index for fact 3.</Description>
<Type>bitmap</Type>
<Properties>DxAM</Properties>
</Index>

<Index name="DxYear">
<Description>
Index for fact 4.</Description>
<Type>bitmap</Type>
<Properties>DxYear</Properties>
</Index>

<Index name="DxAccountType">
<Description>
Index for fact 5.</Description>
<Type>bitmap</Type>
<Properties>DxAccountType</Properties>
</Index>

<Index name="MxAmountN">
<Description>
Index for measure M1.</Description>
<Type>bitslice</Type>
<Properties>MxAmountN</Properties>
</Index>

<Property name="%sourceId">
<Description>
Reference to original data in source table.</Description>
<Type>ISJ.Results</Type>
</Property>

<Property name="%dspartition">
<Description>
This indicates which partition (set of 1M) this fact is in.</Description>
<Type>%Integer</Type>
<Calculated>1</Calculated>
<SqlComputeCode>Set {%dspartition}=({ID}\1024000)+1</SqlComputeCode>
<SqlComputed>1</SqlComputed>
</Property>

<Property name="DxShortName">
<Description><![CDATA[
ディメンジョン: DxShortName<br/>
ソース:ShortName]]></Description>
<Type>ISJ.Performance.StarShortName</Type>
</Property>

<Property name="DxAM">
<Description><![CDATA[
ディメンジョン: DxAM<br/>
ソース:AM]]></Description>
<Type>ISJ.Performance.StarAM</Type>
</Property>

<Property name="DxYear">
<Description><![CDATA[
ディメンジョン: DxYear<br/>
ソース:Year]]></Description>
<Type>ISJ.Performance.StarYear</Type>
</Property>

<Property name="DxAccountType">
<Description><![CDATA[
ディメンジョン: DxAccountType<br/>
ソース:AccountType]]></Description>
<Type>ISJ.Performance.StarAccountType</Type>
</Property>

<Property name="MxAmountN">
<Description><![CDATA[
メジャー: MxAmountN<br/>
ソース:Amount]]></Description>
<Type>%Double</Type>
<Parameter name="SCALE" value="2"/>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of items within the Fact table.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM ISJ_Performance.Fact)
 Quit tCount
]]></Implementation>
</Method>

<Method name="%UpdateFacts">
<Description><![CDATA[
Update a range of Facts with data from the source table row with ids from <var>pStartId</var> to <var>pEndId</var>.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStartId:%String,pEndId:%String,pBatchMode:%Boolean=0,&pChunks:%Integer,pVerbose:%Boolean=0,pTaskGroup:%String="",*pUpdates:%Integer,pRefProp:%String="",pRefID:%String="",&pDimTables]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 Set tRS = ""
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set (SQLCODE,tStarId) = ""
 Set pUpdates = 0
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
 If (pEndId="") {
  Set:+$G(%dsReadCommitted,1) oldzu=$ZU(115,2,1)
  Set pEndId=pStartId
 }
 If (pRefProp'="") {
  Set tRS = ##class(%ResultSet).%New()
  Set tSC = tRS.Prepare("SELECT %ID,%EXTERNAL(AM) ""DxAM"",%EXTERNAL(AccountType) ""DxAccountType"",Amount ""MxAmountN"",%EXTERNAL(ShortName) ""DxShortName"",%EXTERNAL(Year) ""DxYear"" FROM ISJ.Results"_" WHERE "_pRefProp_"=?")
  If $$$ISERR(tSC) Quit
  Set tSC = tRS.Execute(pRefID)
  If $$$ISERR(tSC) Quit
 }
 ElseIf (pStartId=pEndId) {
  &sql(DECLARE sqeqISJzPerformancezFact CURSOR FOR
  SELECT %ID,%EXTERNAL(AM) "DxAM",%EXTERNAL(AccountType) "DxAccountType",Amount "MxAmountN",%EXTERNAL(ShortName) "DxShortName",%EXTERNAL(Year) "DxYear" FROM ISJ.Results
  WHERE %ID = :pStartId
  )
  &sql(OPEN sqeqISJzPerformancezFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqeqISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqeqISJzPerformancezFact)
      Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",pStartId,tSC)
    Quit
  }
 }
 Else {
  &sql(DECLARE sqISJzPerformancezFact CURSOR FOR
  SELECT %ID,%EXTERNAL(AM) "DxAM",%EXTERNAL(AccountType) "DxAccountType",Amount "MxAmountN",%EXTERNAL(ShortName) "DxShortName",%EXTERNAL(Year) "DxYear" FROM ISJ.Results
  WHERE %ID BETWEEN :pStartId  AND :pEndId
  )
  &sql(OPEN sqISJzPerformancezFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sqISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
  If (SQLCODE'=0) {
    Set tSC = $$$ERROR($$$GeneralError,"Error fetching row: ("_$G(SQLCODE)_") "_$G(%msg))
    &sql(CLOSE sqISJzPerformancezFact)
    If ($G(tID)'="") {
       Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",tID,tSC)
    }
    Quit
  }
 }
 While ($S($IsObject(tRS):tRS.Next(.tSC),1:SQLCODE=0)) {
 Try {
 If ($IsObject(tRS)) {
  If $$$ISERR(tSC) Quit
  Set tID = $G(tRS.Data("%ID"))
  Set %var("DxAM") = $G(tRS.Data("DxAM"))
  Set %var("DxAccountType") = $G(tRS.Data("DxAccountType"))
  Set %var("MxAmountN") = $G(tRS.Data("MxAmountN"))
  Set %var("DxShortName") = $G(tRS.Data("DxShortName"))
  Set %var("DxYear") = $G(tRS.Data("DxYear"))
 }
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"BILLING","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(ISJ.Performance.Fact).%ProcessFact(tID,pBatchMode,.%var,.tFactId,.tErrorMsg,.pDimTables)
 If (tFactId'="") {
 If $$$ISOK(tSC) {
  Set pUpdates = pUpdates+1
  Set pChunks(tFactId\64000+1) = ""
 }
 ElseIf (pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 Kill pDimTables
 Set tRows = tRows + 1
 If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
 If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 If ((pTaskGroup'="")&&'(tRows#1000)) {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
  Set tLastCount = tRows
 }
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",tID,tSC)
    }
  }
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(FETCH sqeqISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
   }
   Else {
    &sql(FETCH sqISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
   }
  }
 } ;while
  If '$IsObject(tRS) {
   If (pStartId=pEndId) {
    &sql(CLOSE sqeqISJzPerformancezFact)
   }
   Else {
    &sql(CLOSE sqISJzPerformancezFact)
   }
  }
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 If (pTaskGroup'="") {
  Set tDelta = tRows - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sqeqISJzPerformancezFact)
  &sql(CLOSE sqISJzPerformancezFact)
 }
  Set:$D(oldzu) zu=$ZU(115,2,oldzu)
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",tID,tSC)
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%BuildAllFacts">
<Description><![CDATA[
Update all Facts with data from the source table.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Try {
 Set (SQLCODE,tStarId) = ""
 Set tLastCount = 0
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq2ISJzPerformancezFact CURSOR FOR
  SELECT %ID,%EXTERNAL(AM) "DxAM",%EXTERNAL(AccountType) "DxAccountType",Amount "MxAmountN",%EXTERNAL(ShortName) "DxShortName",%EXTERNAL(Year) "DxYear" FROM ISJ.Results
  )
  &sql(OPEN sq2ISJzPerformancezFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq2ISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  Try {
 Set %dsSourceId = $G(tID)
 Set tExStartTime = $ZH
 Set x = $I(^IRIS.Temp.DeepSeeBuildStats($namespace,"BILLING","expr"),$ZH-tExStartTime)

 #; invoke method to process this fact
 Set tFactId = ""
 Set tSC = ##class(ISJ.Performance.Fact).%ProcessFact(tID,1,.%var,.tFactId,.tErrorMsg)
 Set:$$$ISERR(tSC) err = $I(%dserrcount)
 If ($$$ISERR(tSC)&&pVerbose) {
  Write "Error filing row: ",tID,!
  Write:tErrorMsg'="" tErrorMsg,!
  Write $System.Status.GetOneStatusText(tSC),!!
  Set tSC = $$$OK
 }
 If (tFactId'="") {
  Set tRows = tRows + 1
  Set %dsfactcount = tRows
  If (pVerbose&&'(tRows#1000)) Write $C(13,27)_"[0J"_"Building fact table: ",?25,$J($FN(tRows,",",0),10)," fact(s) updated."
  If (pVerbose&&'(tRows#1000)&&(+$G(%dserrcount))) Write " ",$J($FN(%dserrcount,",",0),10)," error(s)"
 } ;factId
  }
  Catch (ex) {
    Set tSC = ex.AsStatus()
    If ($G(tID)'="") {
      Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",tID,tSC)
    }
  }
  &sql(FETCH sq2ISJzPerformancezFact INTO :tID,:%var("DxAM"),:%var("DxAccountType"),:%var("MxAmountN"),:%var("DxShortName"),:%var("DxYear"))
 } ;while
  &sql(CLOSE sq2ISJzPerformancezFact)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building fact table: "_$FN(+$G(tRows),",",0)_" fact(s) updated"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq2ISJzPerformancezFact)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
  If ($G(tID)'="") {
   Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",tID,tSC)
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%BuildTempFile">
<Description><![CDATA[
Create a temp file of all source ids.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTempKey:%String,*pImplemented:%Boolean,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %var,%source,%ROWID,%msg,%dsSourceId,%dsSourceObj
 Set pImplemented = 1
 Try {
 Set (SQLCODE,tStarId) = ""
 Kill $$$DeepSeeTempSourceId(pTempKey)
 Set tID = ""
 Set tRows = 0
  &sql(DECLARE sq3ISJzPerformancezFact CURSOR FOR
  SELECT %ID FROM ISJ.Results
  )
  &sql(OPEN sq3ISJzPerformancezFact)
  If (SQLCODE'=0) {
   Set tSC = $$$ERROR($$$GeneralError,"Error opening SQL cursor: ("_$G(SQLCODE)_") "_$G(%msg))
   Quit
  }
  &sql(FETCH sq3ISJzPerformancezFact INTO :tID)
  If ((SQLCODE=100)&&pVerbose) {
   Write "No source data found.",!
  }
  While (SQLCODE=0) {
  Set tRows = tRows+1
  Set tChunk = tRows\64000+1
  Set tOffset = tRows#64000+1
  Set:tID'="" $$$DeepSeeTempSourceId(pTempKey,tChunk,tOffset) = $LB(tID,0)
  If (pVerbose&&'(tRows#10000)) Write $C(13,27)_"[0J"_"Building temp file: ",?25,$J($FN(tRows,",",0),10)," record(s) processed."
  If ($D(%dsmaxfacts)&&(tRows>=+$G(%dsmaxfacts))) Quit
  &sql(FETCH sq3ISJzPerformancezFact INTO :tID)
 } ;while
  &sql(CLOSE sq3ISJzPerformancezFact)
 If (pVerbose) Write $C(13,27)_"[0J"_"Building temp file: "_$FN(+$G(tRows),",",0)_" record(s) processed"
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  &sql(CLOSE sq3ISJzPerformancezFact)
 }
 If ($$$ISERR(tSC)) {
  Do ..%LogError(tSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(tSC)
  }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%CheckSourceId">
<Description><![CDATA[
Check for the existence of a single ID in the source table.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pTestId:%String,pVerbose:%Boolean=0,*pSC:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 // Method generation added by DTB422
 Set tSourceExists = 0
 Set pSC = $$$OK
 Try {
  &sql(SELECT COUNT(%ID) INTO :tExists FROM ISJ.Results WHERE %ID = :pTestId)
  If (tExists) {
   Set tSourceExists = 1
  }
 }
 Catch(ex) {
  Set pSC = ex.AsStatus()
 }
 If ($$$ISERR(pSC)) {
  Do ..%LogError(pSC)
  If (pVerbose) {
   Do $System.Status.DisplayError(pSC)
  }
 }
 Quit tSourceExists
]]></Implementation>
</Method>

<Method name="%ProcessFact">
<Description><![CDATA[
Perform the work of updating one fact in the cube.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pID:%String,pBatchMode:%Boolean=0,&%var:%String,&pFactId:%Integer,*pErrorMsg:%String,&pDimTables,pDimensionsOnly:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg,%value,%source,%expression
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = $G(pFactId)
  Set %value = ""

  #; apply null replacements
  Set:(($G(%var("DxAM"))="")||($G(%var("DxAM"))=$C(0))) %var("DxAM") = "<null>"
  Set:(($G(%var("DxAccountType"))="")||($G(%var("DxAccountType"))=$C(0))) %var("DxAccountType") = "<null>"
  Set:(($G(%var("DxShortName"))="")||($G(%var("DxShortName"))=$C(0))) %var("DxShortName") = "<null>"
  Set:(($G(%var("DxYear"))="")||($G(%var("DxYear"))=$C(0))) %var("DxYear") = "<null>"

  If (pDimensionsOnly) {
   Set tFactId=""
   Set tIsInsert = 1
  }
  ElseIf (pBatchMode) {
   Set zuSetting = $zu(115,1,0)
   Set tIsInsert = 1
  }
  ElseIf (pID'="") {
   Set tFactId = $O($$$DeepSeeIndexGLVN("BILLING","%sourceId",pID,""))
   Set tIsInsert = ''(tFactId="")
  }
  ElseIf (pFactId'="") {
   If ($D($$$DeepSeeIndexGLVN("BILLING","%sourceIdReverse",pFactId))) {
    Set tFactId = pFactId
    Set tIsInsert = 0
   }
   Else {
    Set tFactId = ""
    Set tIsInsert = 1
   }
  }
  Else {
   Set tFactId = ""
   Set tIsInsert = 1
  }

 #; STAR Table: ISJ.Performance.StarAM
 If ($G(%var("DxAM"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARAM","Primary",$zu(28,%var("DxAM"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxAM") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxAM"),7,113)
  Lock +$$$DeepSeeIndexGLVN("ISJ.Performance.StarAM",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'ISJ_Performance.StarAM'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARAM","Primary",$zu(28,%var("DxAM"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxAM") = tStarId
   }
   Else {
    &sql(INSERT INTO ISJ_Performance.StarAM (DxAM) VALUES (:%var("DxAM")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarAM",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'ISJ_Performance.StarAM' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxAM") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarAM",tLockKey)
  }
 }

 #; STAR Table: ISJ.Performance.StarAccountType
 If ($G(%var("DxAccountType"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARACCOUNTTYPE","Primary",$zu(28,%var("DxAccountType"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxAccountType") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxAccountType"),7,113)
  Lock +$$$DeepSeeIndexGLVN("ISJ.Performance.StarAccountType",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'ISJ_Performance.StarAccountType'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARACCOUNTTYPE","Primary",$zu(28,%var("DxAccountType"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxAccountType") = tStarId
   }
   Else {
    &sql(INSERT INTO ISJ_Performance.StarAccountType (DxAccountType) VALUES (:%var("DxAccountType")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarAccountType",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'ISJ_Performance.StarAccountType' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxAccountType") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarAccountType",tLockKey)
  }
 }

 #; STAR Table: ISJ.Performance.StarShortName
 If ($G(%var("DxShortName"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARSHORTNAME","Primary",$zu(28,%var("DxShortName"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxShortName") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxShortName"),7,113)
  Lock +$$$DeepSeeIndexGLVN("ISJ.Performance.StarShortName",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'ISJ_Performance.StarShortName'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARSHORTNAME","Primary",$zu(28,%var("DxShortName"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxShortName") = tStarId
   }
   Else {
    &sql(INSERT INTO ISJ_Performance.StarShortName (DxShortName) VALUES (:%var("DxShortName")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarShortName",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'ISJ_Performance.StarShortName' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxShortName") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarShortName",tLockKey)
  }
 }

 #; STAR Table: ISJ.Performance.StarYear
 If ($G(%var("DxYear"))'="") {
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARYEAR","Primary",$zu(28,%var("DxYear"),7,113),""))
  If (tStarId '= "") {
   Set %var("DxYear") = tStarId
  }
  Else {
  Set tLockKey = $zu(28,%var("DxYear"),7,113)
  Lock +$$$DeepSeeIndexGLVN("ISJ.Performance.StarYear",tLockKey):15
  If '$Test {
   Set tSC = $$$ERROR($$$GeneralError,"Unable to acquire lock for dimension table: 'ISJ_Performance.StarYear'")
   Quit
  }
  Set tStarId = $O(^DeepSee.DimensionI("ISJ.PERFORMANCE.STARYEAR","Primary",$zu(28,%var("DxYear"),7,113),""))
   If (tStarId '= "") {
    Set %var("DxYear") = tStarId
   }
   Else {
    &sql(INSERT INTO ISJ_Performance.StarYear (DxYear) VALUES (:%var("DxYear")))
    If (SQLCODE'=0) {
     Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarYear",tLockKey)
     Set tSC = $$$ERROR($$$GeneralError,"Insert into dimension table failed: 'ISJ_Performance.StarYear' SQLCODE="_SQLCODE)
     Quit
    }
    Set %var("DxYear") = %ROWID
   }
   Lock -$$$DeepSeeIndexGLVN("ISJ.Performance.StarYear",tLockKey)
  }
 }
 If ('pBatchMode) {
    Set tVal = %var("DxShortName")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BILLING",2,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BILLING","fact",2))
    }
    Set tVal = %var("DxAM")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BILLING",3,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BILLING","fact",3))
    }
    Set tVal = %var("DxYear")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BILLING",4,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BILLING","fact",4))
    }
    Set tVal = %var("DxAccountType")
    If ((tVal'="")&&('$D($$$DeepSeeIndexGLVN("BILLING",5,tVal)))) {
     Set ts = $I($$$DeepSeeResultsGLVN("BILLING","fact",5))
    }
 }
 #; INSERT or UPDATE data into fact table
 If (pDimensionsOnly) {
 }
 ElseIf (pBatchMode) {
  &sql(INSERT %NOLOCK %NOINDEX INTO ISJ_Performance.Fact (%sourceId,DxAM,DxAccountType,DxShortName,DxYear,MxAmountN)
       VALUES (:pID,:%var("DxAM"),:%var("DxAccountType"),:%var("DxShortName"),:%var("DxYear"),:%var("MxAmountN")))
  Set pFactId = %ROWID
  If (pFactId'="") {
   Set:pID'="" $$$DeepSeeIndexGLVN("BILLING","%sourceId",pID,pFactId) = ""
   Set $$$DeepSeeIndexGLVN("BILLING","%sourceIdReverse",pFactId) = pID
  }
 }
 Else {
 If ($G(tFactId)'="") {
  &sql(UPDATE ISJ_Performance.Fact (%sourceId,DxAM,DxAccountType,DxShortName,DxYear,MxAmountN)
       VALUES (:pID,:%var("DxAM"),:%var("DxAccountType"),:%var("DxShortName"),:%var("DxYear"),:%var("MxAmountN")) WHERE %ID = :tFactId)
  Set pFactId = tFactId
 }
 Else {
  &sql(INSERT INTO ISJ_Performance.Fact (%sourceId,DxAM,DxAccountType,DxShortName,DxYear,MxAmountN)
       VALUES (:pID,:%var("DxAM"),:%var("DxAccountType"),:%var("DxShortName"),:%var("DxYear"),:%var("MxAmountN")))
  Set pFactId = %ROWID
  If (pFactId'="") {
   Set:pID'="" $$$DeepSeeIndexGLVN("BILLING","%sourceId",pID,pFactId) = ""
   Set $$$DeepSeeIndexGLVN("BILLING","%sourceIdReverse",pFactId) = pID
  }
 }
 }
 If (SQLCODE'=0) {
  Set pErrorMsg = $G(%msg)
  Set tSC = $$$ERROR($$$GeneralError,"Error inserting/updating fact: (Source ID:'"_pID_"') "_pErrorMsg)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
 }
 Set:$D(zuSetting) zuSetting = $zu(115,1,zuSetting)
 If $$$ISERR(tSC) {
  Do ..%LogError(tSC)
  If ($G(pID)'="") {
  Do ##class(%DeepSee.Utils).%LogBuildError("BILLING",pID,tSC)
 }
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%OnStartBatch">
<Description><![CDATA[
Notification that a batch of facts are about to be processed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCubeName:%String,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnEndBatch">
<Description><![CDATA[
Notification that a batch of facts have just been processed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCubeName:%String,pVerbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit $$$OK
]]></Implementation>
</Method>

<Method name="%InjectFact">
<Description><![CDATA[
Perform the work of injecting one fact into the cube without associated source data.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&pFactId:%Integer,&pValues:%String,*pChunks:%Integer,pDimensionsOnly:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 New %var,%source,%value
 Set tSC = $$$OK
 Try {
  Set %value=""
  Set %var("DxAM") = $G(pValues("AM~~EXTERNAL"),$G(pValues("AM")))
  Set %var("DxAccountType") = $G(pValues("AccountType~~EXTERNAL"),$G(pValues("AccountType")))
  Set %var("MxAmountN") = $G(pValues("Amount"))
  Set %var("DxShortName") = $G(pValues("ShortName~~EXTERNAL"),$G(pValues("ShortName")))
  Set %var("DxYear") = $G(pValues("Year~~EXTERNAL"),$G(pValues("Year")))

  #; invoke method to process this fact
  Set pFactId = $G(pFactId)
  Set tSC = ##class(ISJ.Performance.Fact).%ProcessFact("",0,.%var,.pFactId,.pErrorMsg,,pDimensionsOnly)
  If $$$ISOK(tSC) {
   Set:(pFactId'="")&&('pDimensionsOnly) pChunks(pFactId\64000+1) = ""
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%DeleteFact">
<Description><![CDATA[
Perform the work of deleting one fact in the cube.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,*pFactId:%Integer,*pErrorMsg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg
 Try {
  Set (SQLCODE,tStarId) = ""
  Set pErrorMsg = ""
  Set pFactId = ""
  Set pFactId = $O($$$DeepSeeIndexGLVN("BILLING","%sourceId",pID,""))
  If (pFactId'="") {
   &sql(DELETE FROM ISJ_Performance.Fact WHERE %ID = :pFactId)
   Kill $$$DeepSeeIndexGLVN("BILLING","%sourceId",pID,pFactId)
   Kill $$$DeepSeeIndexGLVN("BILLING","%sourceIdReverse",pFactId)
  }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%OnKillFacts">
<Description><![CDATA[
Notification that this cube is being killed.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 Try {
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<Method name="%PrecomputeAggregates">
<Description><![CDATA[
Pre-compute certain aggregates.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.<br/>
DO NOT CALL THIS METHOD DIRECTLY]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStartChunk:%Integer,pEndChunk:%Integer,pAggGLVN:%String,pVerbose:%Boolean=0,pTaskGroup:%String="",&pCount:%Integer=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set tSC = $$$OK
 New %ROWID,%msg,%var
 Kill @pAggGLVN
 Try {
  Set (SQLCODE) = ""
  Set tLastCount = 0
 If (pTaskGroup'="") {
  Set tDelta = pCount - tLastCount
  Set inc=$I(^IRIS.Temp.DeepSeeUpdate($namespace,pTaskGroup,"facts"),tDelta)
 }
 }
 Catch(ex) {
  Set tSC = ex.AsStatus()
  Set pErrorMsg = $ZE
  Do ..%LogError(tSC)
 }
 Quit tSC
]]></Implementation>
</Method>

<ForeignKey name="DxAM">
<Properties>DxAM</Properties>
<ReferencedClass>ISJ.Performance.StarAM</ReferencedClass>
<NoCheck>1</NoCheck>
</ForeignKey>

<ForeignKey name="DxAccountType">
<Properties>DxAccountType</Properties>
<ReferencedClass>ISJ.Performance.StarAccountType</ReferencedClass>
<NoCheck>1</NoCheck>
</ForeignKey>

<ForeignKey name="DxShortName">
<Properties>DxShortName</Properties>
<ReferencedClass>ISJ.Performance.StarShortName</ReferencedClass>
<NoCheck>1</NoCheck>
</ForeignKey>

<ForeignKey name="DxYear">
<Properties>DxYear</Properties>
<ReferencedClass>ISJ.Performance.StarYear</ReferencedClass>
<NoCheck>1</NoCheck>
</ForeignKey>

<Parameter name="BITMAPCHUNKINMEMORY">
<Default>0</Default>
</Parameter>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Parameter name="SOURCECLASS">
<Default>ISJ.Results</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Fact("ISJ.PERFORMANCE.FACT")</DataLocation>
<DefaultData>FactDefaultData</DefaultData>
<IdLocation>^DeepSee.Fact("ISJ.PERFORMANCE.FACT")</IdLocation>
<IndexLocation>^ISJ.Performance.FactI</IndexLocation>
<StreamLocation>^DeepSee.FactS("ISJ.PERFORMANCE.FACT")</StreamLocation>
<ExtentSize>10000000</ExtentSize>
<Data name="FactDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%sourceId</Value>
</Value>
<Value name="2">
<Value>DxShortName</Value>
</Value>
<Value name="3">
<Value>DxAM</Value>
</Value>
<Value name="4">
<Value>DxYear</Value>
</Value>
<Value name="5">
<Value>DxAccountType</Value>
</Value>
<Value name="6">
<Value>MxAmountN</Value>
</Value>
</Data>
<Index name="$Fact">
<Location>^DeepSee.Index("BILLING","$Fact")</Location>
</Index>
<Index name="DxAM">
<Location>^DeepSee.Index("BILLING",3)</Location>
</Index>
<Index name="DxAccountType">
<Location>^DeepSee.Index("BILLING",5)</Location>
</Index>
<Index name="DxShortName">
<Location>^DeepSee.Index("BILLING",2)</Location>
</Index>
<Index name="DxYear">
<Location>^DeepSee.Index("BILLING",4)</Location>
</Index>
<Index name="MxAmountN">
<Location>^DeepSee.Index("BILLING","M1")</Location>
</Index>
</Storage>
</Class>


<Class name="ISJ.Performance.Listing">
<Description><![CDATA[
Listing table for cube 'Billing'.<br/>
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateFactTable.]]></Description>
<IncludeCode>%DeepSee</IncludeCode>
<Owner>_PUBLIC</Owner>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.ListingTable</Super>
<TimeChanged>65413,42016.660025</TimeChanged>
<TimeCreated>65413,42016.516293</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Listing("BILLING")</DataLocation>
<DefaultData>ListingDefaultData</DefaultData>
<IdLocation>^DeepSee.Listing("BILLING")</IdLocation>
<IndexLocation>^ISJ.Performance.ListingI</IndexLocation>
<StreamLocation>^ISJ.Performance.ListingS</StreamLocation>
<ExtentSize>1000</ExtentSize>
<Data name="ListingDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Performance.StarAM">
<Description><![CDATA[
Dimension table for cube 'Billing'
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.DimensionTable</Super>
<TimeChanged>65413,42016.689479</TimeChanged>
<TimeCreated>65413,42016.490147</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>

<Index name="Primary">
<Properties>DxAM</Properties>
<Unique>1</Unique>
</Index>

<Property name="DxAM">
<Description><![CDATA[
ディメンジョン・プロパティ: DxAM<br/>
ソース:AM]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="COLLATION" value="SQLUPPER(113)"/>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of members within this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM ISJ_Performance.StarAM)
 Quit tCount
]]></Implementation>
</Method>

<Method name="DxAMIsValid">
<Description><![CDATA[
Validate the KEY value for this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pArg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ##class(%DeepSee.DimensionTable).%ValidateKEY(pArg)
]]></Implementation>
</Method>

<Method name="%GetMemberSpec">
<Description><![CDATA[
Return the specification string for the given member.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMemberId:%String,pCubeName:%String,pDimNo:%Integer,pHierNo:%Integer,pLevelNo:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set tSpec = ""
 Set:pMemberId'="" tSpec = "&["_$$$dsEscapeIdent(..DxAMGetStored(pMemberId))_"]"
 Quit tSpec
]]></Implementation>
</Method>

<Method name="%GetDimensionProperty">
<Description><![CDATA[
Fetch the value of a given dimension property.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProp:%String,pID:%String,*pFormat:%String,*pType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set pProp = $$$UPPER(pProp)
 Set tValue=""
 Set pFormat=""
 If (pProp="DXAM") {
  &sql(SELECT DxAM INTO :tValue FROM ISJ_Performance.StarAM WHERE %ID = :pID)
  Set pType="%String"
 }
 Quit tValue
]]></Implementation>
</Method>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Parameter name="DESCRIPTIONPROPERTY"/>

<Parameter name="KEYPROPERTY">
<Default>DxAM</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARAM")</DataLocation>
<DefaultData>StarAMDefaultData</DefaultData>
<IdLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARAM")</IdLocation>
<IndexLocation>^DeepSee.DimensionI("ISJ.PERFORMANCE.STARAM")</IndexLocation>
<StreamLocation>^DeepSee.DimensionS("ISJ.PERFORMANCE.STARAM")</StreamLocation>
<ExtentSize>100</ExtentSize>
<Data name="StarAMDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DxAM</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Performance.StarAccountType">
<Description><![CDATA[
Dimension table for cube 'Billing'
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.DimensionTable</Super>
<TimeChanged>65413,42016.717729</TimeChanged>
<TimeCreated>65413,42016.498681</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>

<Index name="Primary">
<Properties>DxAccountType</Properties>
<Unique>1</Unique>
</Index>

<Property name="DxAccountType">
<Description><![CDATA[
ディメンジョン・プロパティ: DxAccountType<br/>
ソース:AccountType]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of members within this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM ISJ_Performance.StarAccountType)
 Quit tCount
]]></Implementation>
</Method>

<Method name="DxAccountTypeIsValid">
<Description><![CDATA[
Validate the KEY value for this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pArg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ##class(%DeepSee.DimensionTable).%ValidateKEY(pArg)
]]></Implementation>
</Method>

<Method name="%GetMemberSpec">
<Description><![CDATA[
Return the specification string for the given member.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMemberId:%String,pCubeName:%String,pDimNo:%Integer,pHierNo:%Integer,pLevelNo:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set tSpec = ""
 Set:pMemberId'="" tSpec = "&["_$$$dsEscapeIdent(..DxAccountTypeGetStored(pMemberId))_"]"
 Quit tSpec
]]></Implementation>
</Method>

<Method name="%GetDimensionProperty">
<Description><![CDATA[
Fetch the value of a given dimension property.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProp:%String,pID:%String,*pFormat:%String,*pType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set pProp = $$$UPPER(pProp)
 Set tValue=""
 Set pFormat=""
 If (pProp="DXACCOUNTTYPE") {
  &sql(SELECT DxAccountType INTO :tValue FROM ISJ_Performance.StarAccountType WHERE %ID = :pID)
  Set pType="%Library.Integer"
 }
 Quit tValue
]]></Implementation>
</Method>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Parameter name="DESCRIPTIONPROPERTY"/>

<Parameter name="KEYPROPERTY">
<Default>DxAccountType</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARACCOUNTTYPE")</DataLocation>
<DefaultData>StarAccountTypeDefaultData</DefaultData>
<IdLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARACCOUNTTYPE")</IdLocation>
<IndexLocation>^DeepSee.DimensionI("ISJ.PERFORMANCE.STARACCOUNTTYPE")</IndexLocation>
<StreamLocation>^DeepSee.DimensionS("ISJ.PERFORMANCE.STARACCOUNTTYPE")</StreamLocation>
<ExtentSize>100</ExtentSize>
<Data name="StarAccountTypeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DxAccountType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Performance.StarShortName">
<Description><![CDATA[
Dimension table for cube 'Billing'
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.DimensionTable</Super>
<TimeChanged>65413,42016.746222</TimeChanged>
<TimeCreated>65413,42016.500582</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>

<Index name="Primary">
<Properties>DxShortName</Properties>
<Unique>1</Unique>
</Index>

<Property name="DxShortName">
<Description><![CDATA[
ディメンジョン・プロパティ: DxShortName<br/>
ソース:ShortName]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="COLLATION" value="SQLUPPER(113)"/>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of members within this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM ISJ_Performance.StarShortName)
 Quit tCount
]]></Implementation>
</Method>

<Method name="DxShortNameIsValid">
<Description><![CDATA[
Validate the KEY value for this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pArg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ##class(%DeepSee.DimensionTable).%ValidateKEY(pArg)
]]></Implementation>
</Method>

<Method name="%GetMemberSpec">
<Description><![CDATA[
Return the specification string for the given member.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMemberId:%String,pCubeName:%String,pDimNo:%Integer,pHierNo:%Integer,pLevelNo:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set tSpec = ""
 Set:pMemberId'="" tSpec = "&["_$$$dsEscapeIdent(..DxShortNameGetStored(pMemberId))_"]"
 Quit tSpec
]]></Implementation>
</Method>

<Method name="%GetDimensionProperty">
<Description><![CDATA[
Fetch the value of a given dimension property.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProp:%String,pID:%String,*pFormat:%String,*pType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set pProp = $$$UPPER(pProp)
 Set tValue=""
 Set pFormat=""
 If (pProp="DXSHORTNAME") {
  &sql(SELECT DxShortName INTO :tValue FROM ISJ_Performance.StarShortName WHERE %ID = :pID)
  Set pType="%String"
 }
 Quit tValue
]]></Implementation>
</Method>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Parameter name="DESCRIPTIONPROPERTY"/>

<Parameter name="KEYPROPERTY">
<Default>DxShortName</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARSHORTNAME")</DataLocation>
<DefaultData>StarShortNameDefaultData</DefaultData>
<IdLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARSHORTNAME")</IdLocation>
<IndexLocation>^DeepSee.DimensionI("ISJ.PERFORMANCE.STARSHORTNAME")</IndexLocation>
<StreamLocation>^DeepSee.DimensionS("ISJ.PERFORMANCE.STARSHORTNAME")</StreamLocation>
<ExtentSize>100</ExtentSize>
<Data name="StarShortNameDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DxShortName</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Performance.StarYear">
<Description><![CDATA[
Dimension table for cube 'Billing'
THIS IS A GENERATED CLASS, DO NOT EDIT.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<Owner/>
<ProcedureBlock>1</ProcedureBlock>
<Super>%DeepSee.DimensionTable</Super>
<TimeChanged>65413,42016.774562</TimeChanged>
<TimeCreated>65413,42016.502258</TimeCreated>
<GeneratedBy>ISJ.Performance.CLS</GeneratedBy>

<Index name="Primary">
<Properties>DxYear</Properties>
<Unique>1</Unique>
</Index>

<Property name="DxYear">
<Description><![CDATA[
ディメンジョン・プロパティ: DxYear<br/>
ソース:Year]]></Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="2000"/>
</Property>

<Method name="%Count">
<Description><![CDATA[
Return the total number of members within this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
 Set tCount = 0
 &sql(SELECT COUNT(*) INTO :tCount FROM ISJ_Performance.StarYear)
 Quit tCount
]]></Implementation>
</Method>

<Method name="DxYearIsValid">
<Description><![CDATA[
Validate the KEY value for this dimension.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pArg:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ Quit ##class(%DeepSee.DimensionTable).%ValidateKEY(pArg)
]]></Implementation>
</Method>

<Method name="%GetMemberSpec">
<Description><![CDATA[
Return the specification string for the given member.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMemberId:%String,pCubeName:%String,pDimNo:%Integer,pHierNo:%Integer,pLevelNo:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set tSpec = ""
 Set:pMemberId'="" tSpec = "&["_$$$dsEscapeIdent(..DxYearGetStored(pMemberId))_"]"
 Quit tSpec
]]></Implementation>
</Method>

<Method name="%GetDimensionProperty">
<Description><![CDATA[
Fetch the value of a given dimension property.<br/>
Generated by %DeepSee.Generator:%CreateStarTable.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pProp:%String,pID:%String,*pFormat:%String,*pType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 Set pProp = $$$UPPER(pProp)
 Set tValue=""
 Set pFormat=""
 If (pProp="DXYEAR") {
  &sql(SELECT DxYear INTO :tValue FROM ISJ_Performance.StarYear WHERE %ID = :pID)
  Set pType="%Library.Integer"
 }
 Quit tValue
]]></Implementation>
</Method>

<Parameter name="CUBENAME">
<Default>Billing</Default>
</Parameter>

<Parameter name="DESCRIPTIONPROPERTY"/>

<Parameter name="KEYPROPERTY">
<Default>DxYear</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARYEAR")</DataLocation>
<DefaultData>StarYearDefaultData</DefaultData>
<IdLocation>^DeepSee.Dimension("ISJ.PERFORMANCE.STARYEAR")</IdLocation>
<IndexLocation>^DeepSee.DimensionI("ISJ.PERFORMANCE.STARYEAR")</IndexLocation>
<StreamLocation>^DeepSee.DimensionS("ISJ.PERFORMANCE.STARYEAR")</StreamLocation>
<ExtentSize>100</ExtentSize>
<Data name="StarYearDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DxYear</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="ISJ.Results">
<Super>%Persistent</Super>
<TimeChanged>65387,56975.301078</TimeChanged>
<TimeCreated>63659,49681.826075</TimeCreated>

<Property name="AccountName">
<Type>%String</Type>
<Parameter name="COLLATION" value="EXACT"/>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ShortName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="AM">
<Type>%String</Type>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="Year">
<Type>%Integer</Type>
</Property>

<Property name="Amount">
<Type>%Integer</Type>
</Property>

<Property name="AccountType">
<Type>%Integer</Type>
</Property>

<Index name="ANIndex">
<Properties>AccountName</Properties>
</Index>

<Index name="AMIndex">
<Properties>AM</Properties>
</Index>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^ISJ.ResultsD</DataLocation>
<DefaultData>ResultsDefaultData</DefaultData>
<IdLocation>^ISJ.ResultsD</IdLocation>
<IndexLocation>^ISJ.ResultsI</IndexLocation>
<StreamLocation>^ISJ.ResultsS</StreamLocation>
<Data name="ResultsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>AccontName</Value>
</Value>
<Value name="3">
<Value>Year</Value>
</Value>
<Value name="4">
<Value>Amount</Value>
</Value>
<Value name="5">
<Value>AcountType</Value>
</Value>
<Value name="6">
<Value>AcountName</Value>
</Value>
<Value name="7">
<Value>ShortName</Value>
</Value>
<Value name="8">
<Value>AM</Value>
</Value>
<Value name="9">
<Value>AccountName</Value>
</Value>
<Value name="10">
<Value>AccountNameInMaster</Value>
</Value>
<Value name="11">
<Value>CheckFlag</Value>
</Value>
<Value name="12">
<Value>AccountType</Value>
</Value>
</Data>
</Storage>

<Method name="LoadData2009">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="AccountName VARCHAR(100),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,value5 INTEGER,value6 INTEGER,value7 INTEGER,amount INTEGER,ryear INTEGER,accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="LoadData2010">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="NO INTEGER,AccountName VARCHAR(100),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,value5 INTEGER,amount INTEGER,ryear INTEGER,accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="LoadData2012">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="NO INTEGER,AccountName VARCHAR(100),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,amount INTEGER,ryear INTEGER,accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="LoadData2015">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="NO INTEGER,AccountName VARCHAR(100),Dummy CHAR(1),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,amount INTEGER,ryear INTEGER,accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="LoadData2017">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="AccountName VARCHAR(100),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,amount INTEGER,ryear INTEGER,am VARCHAR(20),accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AM = resultSet.am
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="LoadData2018">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set rowtype="dummy1 VARCHAR(10),am VARCHAR(20),AccountName VARCHAR(100),dummy2 VARCHAR(1),Value1 INTEGER,value2 INTEGER,value3 INTEGER,value4 INTEGER,amount INTEGER,ryear INTEGER,accounttype INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()
 set year = 2018

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AccountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = year
	 set result.AM = $zcvt($piece(resultSet.am,","),"U")
	 if result.AM [ "YAKU" set result.AM = "YAKU"
	 if result.AM [ "KUMO" set result.AM = "KUMO"	  
	 set result.AcountType = resultSet.accounttype
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>

<Method name="ReloadData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set sts = ##class(ISJ.Results).%KillExtent()	
 Set rowtype="NO INTEGER,AM VARCHAR(10),AcountName VARCHAR(100),accounttype INTEGER,amount INTEGER,ShortName VARCHAR(20),ryear INTEGER"

 Set result=##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.pFilename)

 Set resultSet =result.%NextResult()

 While resultSet.%Next() {
	 set result = ##class(ISJ.Results).%New()
	 set result.AcountName = resultSet.AcountName
	 set result.Amount = $number(resultSet.amount)
	 set result.Year = resultSet.ryear
	 set result.AcountType = resultSet.accounttype
	 set result.ShortName = resultSet.ShortName
	 set result.AM = resultSet.AM
	 set sts = result.%Save()
	 if $$$ISERR(sts) {
	    write $system.Status.DisplayError(sts),!
	 }
 }

 Set resultSet="",result=""
]]></Implementation>
</Method>
</Class>


<Class name="ISJ.Service.DataCleansing">
<Super>Ens.BusinessService</Super>
<TimeChanged>65351,41633.453949</TimeChanged>
<TimeCreated>65350,59245.993176</TimeCreated>

<Method name="OnProcessInput">
<FormalSpec>pInput:Ens.StringRequest,*pOutput:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	Set request = ##class(ISJ.Message.APListRequest).%New()
	Set request.FileDir = pInput.StringValue

	// send request to BO
	Set tSC = ..SendRequestSync("Update some columns for ISJ.Results",request,.pOutput)
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="ISJ.Tools.Utility">
<Super>%Base</Super>
<TimeChanged>65414,64278.797411</TimeChanged>
<TimeCreated>65337,63894.484516</TimeCreated>

<Method name="FindSimilarAccountName">
<ClassMethod>1</ClassMethod>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set threshold = 0.8  //同一アカウント名の可能性のある類似度の閾値
  
  try {
    //ISJ.Resultsレコードのアカウント名とISJ.Master.AMのアカウント名の類似度を計算し、最も類似度が高いものを選択
    //
  
    /* ISJ.Resultsを全件取得 */
    kill ^similarity
    set allrecords = "select id,accountname,year from ISJ.Results"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(allrecords)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus)
        $$$ThrowStatus(qstatus)	    
    }
    set rset = statement.%Execute()
    while rset.%Next() {
      set id = rset.id
      set accountname1 = rset.accountname
      set year = rset.year
      if year < 2005 set year = 2005  //2005年より前は、2005年のマスターで代用
      set byyear = "select accountname,am from isj_master.am where year = ?"
      set statement2 = ##class(%SQL.Statement).%New()
      set qstatus = statement2.%Prepare(byyear)
      if qstatus'=$$$OK {
	      write "%Prepare失敗:" 
	      do $System.Status.DisplayError(qstatus)
	      $$$ThrowStatus(qstatus)
	  }
      set rset2 = statement2.%Execute(year)
      kill result
      while rset2.%Next() {
	    set accountname2 = rset2.accountname
	    set an1 = $zcvt(accountname1,"U")
	    set an2 = $zcvt(accountname2,"U")
	    //先頭3文字が異なれば、違うアカウントとみなし類似度の計算は行わない(処理高速化のため)
	    if $extract(an1,1,3) '= $extract(an2,1,3) continue
	    set commandline = "python3 similarity.py """_an1_""" "_""""_an2_""""
	    open "|CPIPE|1":commandline:"QR"
	    use "|CPIPE|1" read result
	    close "|CPIPE|1"
	    set result(result) = $listbuild(accountname1,accountname2,rset2.am)
	    
      }
    
      set last = $order(result(""),-1)
      if last '= "" {
	      if +last > threshold {
		    if (+last '= 1) {
			  set ^similarity(id) = $listbuild(last)_result(last)
		    } 
	      }
      }
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }  
  
  quit status
]]></Implementation>
</Method>

<Method name="SimilarAccountName">
<ClassMethod>1</ClassMethod>
<FormalSpec>AccountName:%String,Year:%Integer</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  // 戻り値　$list(近似値,対象アカウント名,近似アカウント名,判定フラグ)
	
  if Year < 2005 set Year = 2005
  set SimilarName = ""
  set threshold1 = 0.93  //同一アカウント名とみなす類似度の閾値
  set threshold2 = 0.80  //同一アカウント名の可能性のある類似度の閾値
  set accountname1 = AccountName
  
  try {
    set byyear = "select accountname from isj_master.am where year = ?"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(byyear)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus)
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement.%Execute(Year)
    kill result
    while rset.%Next() {
	  set accountname2 = rset.accountname
	  set an1 = $zcvt(accountname1,"U")
	  set an2 = $zcvt(accountname2,"U")	 
	  //先頭3文字が異なれば、違うアカウントとみなし類似度の計算は行わない(処理高速化のため)
	  if $extract(an1,1,3) '= $extract(an2,1,3) continue
	  set commandline = "python3 similarity.py """_an1_""" "_""""_an2_""""
	  open "|CPIPE|1":commandline:"QR"
	  use "|CPIPE|1" read result
	  close "|CPIPE|1"
	  set result(result) = $listbuild(accountname1,accountname2)
	  if +result > threshold1 quit
	    
    }
  
    // lastは最も類似度が高い値
    // SimilarName = $lb(類似度,ISJ.Resultsのアカウント名,ISJ_Master.AMのアカウント名,同一フラグ)
    set last = $order(result(""),-1)
    if last '= "" {
	  if +last > threshold1 {
		  if (+last '= 1) {
			 set SimilarName = $listbuild(last)_result(last)_$listbuild(1)
		  } 
	  }
	  elseif +last > threshold2 {
			 set SimilarName = $listbuild(last)_result(last)_$listbuild(0)
	  }
    }
  }
  catch (e) {
    set status = e.AsStatus()
  } 
  
  quit SimilarName
]]></Implementation>
</Method>

<Method name="GetAM">
<ClassMethod>1</ClassMethod>
<FormalSpec>AccountName:%String,Year:%Integer</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  //戻り値　$list(近似値,対象アカウント名,近似アカウント名,判定フラグ,AM名）
  // 引数のAccountNameで一致した場合は、近似値=1 判定フラグ=1 AM名=マスターから取得したAM名
  // 一致していない場合、ApListの該当年（引数Year）のアカウント名総当たりでアカウント名の近似値を計算
  //（処理速度向上のため、比較を行わないケースあり）
  // 近似値の閾値　0.93以上は同一とみなす
  // 0.8以上は保留（人の判断必要）
  set AccountManager = ""
  
  // ISJ_Master.AMには2005年より前のデータはないため、それ以前は、2005のマスターを使用
  
  if Year < 2005 set Year = 2005

  set year = Year
  
  try {
  
    /* アカウントマネージャーの名前を取得する */
    set yearaccountname = "SELECT AM FROM ISJ_Master.AM where Year = ? and AccountName = ?"
    set statement1 = ##class(%SQL.Statement).%New()
    set qstatus = statement1.%Prepare(yearaccountname)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus)
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement1.%Execute(year,AccountName)
    while rset.%Next() {
	  // $list(近似値,対象アカウント名,近似アカウント名,判定フラグ,AM名)
      set AccountManager = $listbuild(1,AccountName,AccountName,1,rset.AM)
    }
  
    //アカウントマネージャが見つからない場合には、アカウント名が表記ゆれで一致していない可能性がある
    if AccountManager = "" {
	  
	  set SimilarAccountNameList = ..SimilarAccountName(AccountName,Year)

	  if SimilarAccountNameList'="" {
		  
	    set SimilarAccountName = $list(SimilarAccountNameList,3)
	    set okflag = $list(SimilarAccountNameList,4)

        /* アカウントマネージャーの名前を取得する */
        set yearaccountname = "SELECT AM FROM ISJ_Master.AM where Year = ? and AccountName = ?"
        set statement2 = ##class(%SQL.Statement).%New()
        set qstatus = statement2.%Prepare(yearaccountname)
        if qstatus'=$$$OK {
	      write "%Prepare失敗:" 
	      do $System.Status.DisplayError(qstatus) 
	      $$$ThrowStatus(qstatus)
	    }
        set rset2 = statement2.%Execute(year,SimilarAccountName)
        while rset2.%Next() {
          set AccountManager = SimilarAccountNameList_$listbuild(rset2.AM)
        }
      }
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
  
  quit AccountManager
]]></Implementation>
</Method>

<Method name="BuildAMMaster">
<ClassMethod>1</ClassMethod>
<FormalSpec>filedir:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set tab = $char(9)
  
  try {
    do ##class(ISJ.Master.AM).%KillExtent()
  	
    /* Locationの所にあるcsvファイルを順次読み込み年毎のアカウントに対するアカウントマネージャーを取得する */
  
    set query = ##class(%SQL.Statement).%New()
    set status = query.%PrepareClassQuery("%File","FileSet")
    if $$$ISERR(status) { 
      do $system.OBJ.DisplayError(status) 
      $$$ThrowStatus(status)
    } 
    set rs = query.%Execute(filedir,"APlist*.txt")
    while rs.%Next() {
	  set filename = rs.%Get("Name")
	  set year = $extract(filename,*-7,*-4)
	  //年毎にAMとAccount名のカラム番号が違うので、その番号を取得
	  set amcolumnno = $case(year,2005:4,2006:7,2007:12,:15)
	  set accolumnno = $case(year,2005:3,2006:5,2007:7,:8)
	  set inputstream = ##class(%Stream.FileCharacter).%New()
	  //set inputstream.TranslateTable = "UTF8"
	  set status = inputstream.LinkToFile(filename)
	  while 'inputstream.AtEnd {
	    set line = inputstream.ReadLine()
	    set accountname = $piece(line,tab,accolumnno)
        //顧客名は、""で囲まれるケースがあるので、読み込み後に"を取り除く
	    set accountname = $translate(accountname,"""","")
	    set am = $piece(line,tab,amcolumnno)

        if (accountname '= "") && (am '= "") && (year '= "") {
          set amrecord = ##class(ISJ.Master.AM).%New()
          set amrecord.Year = year
          set amrecord.AccountName = accountname
          set amrecord.AM = am
          set status = amrecord.%Save()
          if $$$ISERR(status) {
            do $system.OBJ.DisplayError(status)
            $$$ThrowStatus(status)
	      }
        }	  
      }
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
	  
  quit status
]]></Implementation>
</Method>

<Method name="BuildAccountNameList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set tab = $char(9)
  
  try {
  
    set outputstream = ##class(%Stream.FileCharacter).%New()
    set outputstream.TranslateTable = "UTF8"
    set status = outputstream.LinkToFile(pFileName)

    set accountname = "select distinct accountname from isj.results order by accountname"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(accountname)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus)
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement.%Execute()
    while rset.%Next() {
      set line = """"_rset.accountname_""""
	  set status = outputstream.WriteLine(line)
    }
	    	  
    do outputstream.%Save()
  }
  catch (e) {
	  set status = e.AsStatus()
  }	  
	
    quit status
]]></Implementation>
</Method>

<Method name="BuildShortNameLookupTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  
  try {	
    //AccountNameとShortNameの入ったcsvファイルを読み込みSHORTNAMEルックアップテーブルを生成する
  
    set tablename = "SHORTNAME"
    set result = ##class(%SQL.Statement).%ExecDirect(,"delete from Ens_Util.LookupTable where tablename = ?",.tablename)
    set resultSet = result.%NextResult()

    set rowtype = "AccountName VARCHAR(100),ShortName VARCHAR(20)"
    set result2 = ##class(%SQL.Statement).%ExecDirect(,"call %SQL_Util.CSV(,?,?)",.rowtype,.filename)
    set resultSet2 = result2.%NextResult()
    if resultSet2 = "" write "filename is not good!",! quit
    while resultSet2.%Next() {
	  set accountname = resultSet2.AccountName
	  set shortname = resultSet2.ShortName
	  set lookup = ##class(Ens.Util.LookupTable).%New()
	  set lookup.TableName = tablename
	  set lookup.KeyName = accountname
	  set lookup.DataValue = shortname
	  set staus = lookup.%Save()
      if $$$ISERR(status) { 
        do $system.OBJ.DisplayError(status) 
        $$$ThrowStatus(status)
      } 
	  
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
  quit status
]]></Implementation>
</Method>

<Method name="AssignShortName">
<ClassMethod>1</ClassMethod>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  

  try {  	
    //Shortnameを割り当てる
  
    set allresults = "select id from isj.results"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(allresults)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus) 
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement.%Execute()
    while rset.%Next() {
	  set id = rset.id
	  set record = ##class(ISJ.Results).%OpenId(id)
	  if '$isobject(record) {write "no object:" quit}
	  set accountname = record.AccountName
	
	  set getshortname = "select DataValue from ens_util.lookuptable where tablename = 'SHORTNAME' and keyname = ?"
	  set statement2 = ##class(%SQL.Statement).%New()
      set qstatus = statement2.%Prepare(getshortname)
      if qstatus'=$$$OK {
	      write "%Prepare失敗:" 
	      do $System.Status.DisplayError(qstatus) 
	      $$$ThrowStatus(qstatus)
	  }
      set rset2 = statement2.%Execute(accountname)
      while rset2.%Next() {
	    set shortname = rset2.DataValue
      }
	  set record.ShortName = shortname
	  set status = record.%Save()
      if status'=$$$OK {
	      write "%Save失敗:" 
	      do $System.Status.DisplayError(status) 
	      $$$ThrowStatus(status)
	  }
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
	  
  quit status
]]></Implementation>
</Method>

<Method name="AssignAccountType">
<ClassMethod>1</ClassMethod>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  
  try {  	
    //AccountTypeを割り当てる
  
    //ShortNameとそのAccountType
    set allshortname = "select distinct DataValue from Ens_Util.LookupTable where TableName = 'SHORTNAME'"
    set statement1 = ##class(%SQL.Statement).%New()
    set qstatus = statement1.%Prepare(allshortname)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus) 
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement1.%Execute()
    while rset.%Next() {
      set shortname = rset.DataValue
      set minyear = "select min(year) as firstyear from isj.results where shortname = ?"
      set statement2 = ##class(%SQL.Statement).%New()
      set qstatus = statement2.%Prepare(minyear)
      if qstatus'=$$$OK {
	      write "%Prepare失敗:" 
	      do $System.Status.DisplayError(qstatus) 
	      $$$ThrowStatus(qstatus)
	  }
      set rset2 = statement2.%Execute(shortname)
      while rset2.%Next() {
	    set firstyear = rset2.firstyear
	    set accounttype = $case(firstyear,2003:1,2004:1,2005:2,2006:2,2007:2,2008:2,2009:2,:3)
	    set accounttype(shortname) = accounttype
      }
    }
  
    set allresults = "select id,shortname from isj.results"
    set statement3 = ##class(%SQL.Statement).%New()
    set qstatus = statement3.%Prepare(allresults)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus) 
	    $$$ThrowStatus(qstatus)
	}
    set rset3 = statement3.%Execute()
    while rset3.%Next() {
	  set id = rset3.id
	  set shortname = rset3.shortname
	  set record = ##class(ISJ.Results).%OpenId(id)
	  if '$isobject(record) {write "no object:" quit}
	  set record.AccountType = accounttype(shortname)
	  set status = record.%Save()
      if status'=$$$OK {
	      write "%Save失敗:" 
	      do $System.Status.DisplayError(status) 
	      $$$ThrowStatus(status)
	  }
    }
  }
  catch(e) {
	  set status = e.AsStatus()
  }
  quit status
]]></Implementation>
</Method>

<Method name="AssignAccountManager">
<ClassMethod>1</ClassMethod>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  
  set start = $piece($h,",",2)	

  try {
    //Account Managerを割り当てる
    kill ^maybesame
    
    set allresults = "select id,year,accountname,am from isj.results where am is null"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(allresults)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus) 
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement.%Execute()
    while rset.%Next() {
	  set id = rset.id
	  set accountname = rset.accountname
	  set year = rset.year
	  set amlist = ..GetAM(accountname,year)
	  set ^amlist(accountname,year) = amlist
	  if $listvalid(amlist) && $listlength(amlist) > 0 {
		set issame = $list(amlist,4)
		set am = $list(amlist,5)

	    if issame {
	      set record = ##class(ISJ.Results).%OpenId(id)
	      if '$isobject(record) {write "no object:" quit}
	      set record.AM = am
	      set status = record.%Save()
          if status'=$$$OK {
	        write "%Save失敗:" 
	        do $System.Status.DisplayError(status) 
	        $$$ThrowStatus(status)
	      }
	    }
	    else {
	        set ^maybesame(id) = amlist
	    }
	        	  
	  }
	}
  }
  catch (e) {
	  set status = e.AsStatus()
  }

  set end = $piece($h,",",2)
  //write "elapsed time = ",end - start	
  quit status
]]></Implementation>
</Method>

<Method name="InvokeDataCleansingService">
<ClassMethod>1</ClassMethod>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //　Business Service経由で起動（InvokeDataCleansingService()）すると、パイプでpythonプログラムからデータ取得する部分が動作しない
  //  リソース権限の関連か？
  	
  set status = $$$OK
  
  try {	
    set tSC = ##class(Ens.Director).CreateBusinessService("Data Cleansing",.tService)
    If ($$$ISERR(tSC)) Quit
  
    read "file directory ? ",fdir
    
    write !,"処理が終わるまでしばらくお待ちください...",!

    set request = ##class(Ens.StringRequest).%New()
    set request.StringValue = fdir

    set tSC = tService.ProcessInput(request,.confirmation)
    If ($$$ISERR(tSC)) Quit
    If $IsObject($G(confirmation)) {
	  write "データのクレンジングが終了しました ",confirmation.StringValue
    // 
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
  quit status
]]></Implementation>
</Method>

<Method name="DataCleansing">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDir:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  //　Windowsでは、Business Service経由で起動（InvokeDataCleansingService()）すると、パイプでpythonプログラムからデータ取得する部分が動作しないので、コマンド経由で起動させる処理	
  set status = $$$OK
		
  set filedir = pDir
  set os = $system.Version.GetOS()
  if os = "Windows" {
	 set dirsep = "\"
  }
  else {
	 set dirsep = "/"
  }
    
  set status = ##class(ISJ.Tools.Utility).BuildAMMaster(filedir)
 
  if status = '$$$OK {
	 write filedir_" のデータが追加できませんでした。(BuildAMMaster) エラー: "_$system.Status.GetErrorText(status),!
	 quit status
  }

  set filename = filedir_dirsep_"shortnamelist.csv"

  set status = ##class(ISJ.Tools.Utility).BuildShortNameLookupTable(filename)

  if status = '$$$OK {
	 write filedir_" のデータが追加できませんでした。(BuildShortNameLookupTable) エラー: "_$system.Status.GetErrorText(status),!
	 quit status
  }

  set status = ##class(ISJ.Tools.Utility).AssignShortName()

  if status = '$$$OK {
	 write filedir_" のデータが追加できませんでした。 (AssignShortName) エラー: "_$system.Status.GetErrorText(status),!
	 quit status
  }

  set status = ##class(ISJ.Tools.Utility).AssignAccountType()

  if status = '$$$OK {
	 write filedir_" のデータが追加できませんでした。 (AssignAccountType) エラー: "_$system.Status.GetErrorText(status),!
	 quit status
  }

  set status = ##class(ISJ.Tools.Utility).AssignAccountManager()

  if status = $$$OK {
	 write filedir_" のデータが追加されました。"
  }
  else {
	 write filedir_" のデータが追加できませんでした。 (AssignAccountManager) エラー: "_$system.Status.GetErrorText(status)
  }

  Quit status
]]></Implementation>
</Method>

<Method name="OutputMayBeSameList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set tab = $char(9)
  
  try {
    set outputstream = ##class(%Stream.FileCharacter).%New()
    set outputstream.TranslateTable = "UTF8"
    set status = outputstream.LinkToFile(pFileName)
    set id = ""
    set id = $order(^maybesame(id))
    while id {
      set line = id_tab_$listtostring(^maybesame(id),tab)
	  set status = outputstream.WriteLine(line)
	  if $$$ISERR(status) { 
	    do $system.OBJ.DisplayError(status) 
	    $$$ThrowStatus(status)
	} 
      set id = $order(^maybesame(id))
    }
	    	  
    do outputstream.%Save()
  }
  catch (e) {
	  set status = e.AsStatus()
  }
	
  quit status
]]></Implementation>
</Method>

<Method name="AssignAM">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set tab = $char(9)
  
  try {
    set inputstream = ##class(%Stream.FileCharacter).%New()
    set inputstream.TranslateTable = "UTF8"
    set status = inputstream.LinkToFile(pFileName)
    while 'inputstream.AtEnd {
	  set line = inputstream.ReadLine()
	  set isOK = $piece(line,tab,5)
	  set am = $piece(line,tab,6)
	  set id = $piece(line,tab,1)
	
	  if isOK {
	    set record = ##class(ISJ.Results).%OpenId(id)
	    if '$isobject(record) w !,"no object ",id," line = ",line,! continue
	    set record.AM = $translate(am,$char(13),"")
	    set status = record.%Save() 
	    if $$$ISERR(status) { 
	      do $system.OBJ.DisplayError(status) 
	      continue
	    } 
	    write "id = ",id," のレコードのAMを更新しました",!
		
	  }
    }
  }
  catch (e) {
	  set status = e.AsStatus()
  }
	
  quit status
]]></Implementation>
</Method>

<Method name="BuildNoAMList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%String</FormalSpec>
<Language>objectscript</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set status = $$$OK
  set tab = $char(9)
  
  try {
    set outputstream = ##class(%Stream.FileCharacter).%New()
    set outputstream.TranslateTable = "UTF8"
    set status = outputstream.LinkToFile(pFileName)

    set amisnull = "select id, accountname, year from isj.results where am is null"
    set statement = ##class(%SQL.Statement).%New()
    set qstatus = statement.%Prepare(amisnull)
    if qstatus'=$$$OK {
	    write "%Prepare失敗:" 
	    do $System.Status.DisplayError(qstatus)
	    $$$ThrowStatus(qstatus)
	}
    set rset = statement.%Execute()
    while rset.%Next() {
	  set accountname = rset.accountname
	  set id = rset.id
	  set year = rset.year
      set line = id_tab_0_tab_accountname_tab_accountname_tab_1_tab_""_tab_year
	  set status = outputstream.WriteLine(line)
    }
	    	  
    do outputstream.%Save()
  }
  catch (e) {
	  set status = e.AsStatus()
  }
  quit status
]]></Implementation>
</Method>
</Class>


<Class name="ISJ.Transform.Year2003">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51091.973686</TimeChanged>
<TimeCreated>65331,47045.923365</TimeCreated>
<DependsOn>ISJ.ByAP2003.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2003.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='$inumber(source.Amount,",")' property='target.Amount' action='set' />
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2004">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51051.18033</TimeChanged>
<TimeCreated>65331,47296.291841</TimeCreated>
<DependsOn>ISJ.ByAP2004.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2004.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Amount,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2005">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51124.017787</TimeChanged>
<TimeCreated>65331,47531.545095</TimeCreated>
<DependsOn>ISJ.ByAP2005.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2005.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2006">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51156.444617</TimeChanged>
<TimeCreated>65331,47759.9657</TimeCreated>
<DependsOn>ISJ.ByAP2006.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2006.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2007">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65336,66375.344035</TimeChanged>
<TimeCreated>65331,47905.919579</TimeCreated>
<DependsOn>ISJ.ByAP2008.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2008.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..Lookup("SHORTNAME",..ToUpper(source.Organization))' property='target.ShortName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='"ISJ"' property='target.AM' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2008">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65384,68045.468427</TimeChanged>
<TimeCreated>65331,51639.300671</TimeCreated>
<DependsOn>ISJ.ByAP2008.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2008.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2009">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51301.671106</TimeChanged>
<TimeCreated>65331,51734.319752</TimeCreated>
<DependsOn>ISJ.ByAP2009.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2009.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2010">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65336,66465.355875</TimeChanged>
<TimeCreated>65331,51848.308788</TimeCreated>
<DependsOn>ISJ.ByAP2008.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2008.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..Lookup("SHORTNAME",..ToUpper(source.Organization))' property='target.ShortName' action='set' />
<assign value='"ISJ"' property='target.AM' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2011">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65336,66497.994576</TimeChanged>
<TimeCreated>65331,52052.409521</TimeCreated>
<DependsOn>ISJ.ByAP2008.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2008.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..Lookup("SHORTNAME",..ToUpper(source.Organization))' property='target.ShortName' action='set' />
<assign value='"ISJ"' property='target.AM' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2012">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51410.993467</TimeChanged>
<TimeCreated>65331,52314.444049</TimeCreated>
<DependsOn>ISJ.ByAP2012.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2012.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2013">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51454.459802</TimeChanged>
<TimeCreated>65331,52510.249711</TimeCreated>
<DependsOn>ISJ.ByAP2013.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2013.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2015">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51507.898473</TimeChanged>
<TimeCreated>65331,53284.9964</TimeCreated>
<DependsOn>ISJ.ByAP2015.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2015.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2016">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65351,48859.961766</TimeChanged>
<TimeCreated>65331,53440.96464</TimeCreated>
<DependsOn>ISJ.ByAP2016.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2016.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='..Piece(source.SalesRep)' property='target.AM' action='set' />
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2017">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65346,51600.813752</TimeChanged>
<TimeCreated>65331,53551.753529</TimeCreated>
<DependsOn>ISJ.ByAP2017.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2017.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='source.Organization' property='target.AccountName' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="ISJ.Transform.Year2018">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65351,48811.900894</TimeChanged>
<TimeCreated>65331,53687.386827</TimeCreated>
<DependsOn>ISJ.ByAP2018.Record,ISJ.Message.DBRequest</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='ISJ.ByAP2018.Record' targetClass='ISJ.Message.DBRequest' create='new' language='objectscript' >
<assign value='..Piece(source.SalesRep)' property='target.AM' action='set' />
<assign value='$inumber(source.Total,",")' property='target.Amount' action='set' />
<assign value='..SubString(context.ConfigName,5,8)' property='target.Year' action='set' />
<assign value='source.Organization' property='target.AccountName' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Project name="isjperformance" LastModified="2020-02-05 16:57:19.519539">
  <Items>
    <ProjectItem name="ISJ.Tools.Utility" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.BP.CollectBilling" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2003.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2004.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2005.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2006.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2008.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2009.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2012.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2013.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2015.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2016.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2017.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2018.Record" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Master.AM" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Message.APListRequest" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Message.DBRequest" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Operation.DataCleansing" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Operation.InsertRecord" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.Fact" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.Listing" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.StarAccountType" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.StarAM" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.StarShortName" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance.StarYear" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Service.DataCleansing" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2003" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2004" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2005" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2006" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2007" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2008" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2009" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2010" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2011" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2012" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2013" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2015" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2016" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2017" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Transform.Year2018" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.BillingResult" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2003" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2004" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2005" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2006" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2008" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2009" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2012" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2013" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2015" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2016" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2017" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.ByAP2018" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Performance" type="CLS"></ProjectItem>
    <ProjectItem name="ISJ.Results" type="CLS"></ProjectItem>
  </Items>
</Project>
</Export>
